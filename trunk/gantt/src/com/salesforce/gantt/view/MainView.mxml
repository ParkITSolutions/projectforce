<mx:VBox styleName="VBoxContentAll" 
    xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="com.salesforce.gantt.view.*"
	xmlns:container="com.salesforce.gantt.view.components.containers.*"
	creationComplete="init();" verticalGap="0"
	mouseMove="resetSynchronizerTimer(event)"
	keyDown="resetSynchronizerTimer(event);">
	
	<mx:Style>
	
	</mx:Style>	
	<mx:Script>
		<![CDATA[
			import com.salesforce.AsyncResponder;
			import com.salesforce.gantt.controller.IProfiles;
			import com.salesforce.gantt.controller.Profiles;
			import com.salesforce.gantt.model.Resource;
			import com.salesforce.gantt.view.event.UserEvent;
			import mx.binding.utils.BindingUtils;
			import com.salesforce.gantt.util.CustomArrayUtil;
			import com.salesforce.gantt.view.event.ResourceEvent;
			import com.salesforce.gantt.model.Project;
			import com.salesforce.gantt.view.event.PopUpEvent;
		import mx.automation.codec.KeyCodePropertyCodec;
		import com.salesforce.gantt.view.print.FormPrintViewBarChart;
		import com.salesforce.gantt.view.print.FormPrintViewTask;
		import mx.containers.TitleWindow;
		import com.salesforce.gantt.util.ConnectionUtil;
		import com.salesforce.gantt.view.event.TaskEvent;

		import com.salesforce.gantt.model.UI;
		import com.salesforce.gantt.model.Task;
		import com.salesforce.gantt.model.UiTask;
		import com.salesforce.gantt.model.User;
		import com.salesforce.gantt.model.SyncInfo;
		import com.salesforce.gantt.model.Calendar;
		import com.salesforce.gantt.model.Dependency;
		import com.salesforce.gantt.model.Heriarchy;
	 	import mx.events.ResizeEvent;
		import mx.managers.PopUpManager;
		import com.salesforce.gantt.controller.Constants;
		import com.salesforce.gantt.view.components.DragHorizontal;
		import com.salesforce.gantt.controller.Components;
		import com.salesforce.gantt.controller.Tasks;		
		import flash.events.Event;
		import mx.containers.Panel;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert; 
		import mx.controls.Button;
		
		/**
		 * TODO possible code movement from here
		 * Try to divide the mainView into separate files, to be more clear.
		 */
		[Bindable]
		public var resourceLogged : Resource;
		
		[Bindable]
		public var project : Project;
		[Bindable]
		private var visibleTasks : ArrayCollection = Components.instance.tasks.filterVisibleTask();
		
		// TODO perhaps remove these attribute
		// attribute to manage the new/edit task.
		// change private attribute.
		[Bindable]
		public var selectedTask : UiTask = Components.instance.tasks.selectedTask;
		
		[Bindable]
		private var profiles : IProfiles;
		
		[Bindable]
		private var availableResources : ArrayCollection;
		/**
		 * to here
		 */ 
		 
        [Bindable]
        public var newTask : Boolean = false;
		/**
		* Loader img
		*/
		[Embed(source="assets/imgs/swirl.swf")]
		public var loading_image : Class;
		
		/**
		* Timescale Buttons
		*/
	    [Embed(source="assets/imgs/show_day_off.gif")]
	    private var day_off : Class;
	    [Embed(source="assets/imgs/show_day_on.gif")]
	    private var day_on : Class;	     

	    [Embed(source="assets/imgs/show_week_off.gif")]
	    private var week_off : Class;
	    [Embed(source="assets/imgs/show_week_on.gif")]
	    private var week_on : Class;	     

	    [Embed(source="assets/imgs/show_month_off.gif")]
	    private var month_off : Class;
	    [Embed(source="assets/imgs/show_month_on.gif")]
	    private var month_on : Class;	     
	     
	    [Embed(source="assets/imgs/show_year_off.gif")]
	    private var year_off : Class;
	    [Embed(source="assets/imgs/show_year_on.gif")]
	    private var year_on : Class;	
	    
	    /**
	    * Box Borders / Drag Handlers
	    */
	    [Embed(source="assets/imgs/arrow_divide_box_left.png")]
	    private var arrow_divide_box_left : Class;

	    [Embed(source="assets/imgs/arrow_divide_box_right.png")]
	    private var arrow_divide_box_right : Class;	

	    [Embed(source="assets/imgs/arrow_divide_box_bottom.png")]
	    private var arrow_divide_box_bottom : Class;

	    [Embed(source="assets/imgs/arrow_divide_box_top.png")]
	    private var arrow_divide_box_top : Class;	
		
		 /**
		 * remember the action for new task
		 */
		 
		 public var action : String;
		 
		 
		/**
		*	Overlay Tabs
		*/
	    
	    [Embed(source="assets/imgs/white_tab.png")]
	    private var overlay_selected_tab : Class;	

	    [Embed(source="assets/imgs/gray_tab.png")]
	    private var overlay_tab : Class;

	    
	    /**
	    * The Horizontal (Navigator tab header images)
	    *
	    */
	    [Embed(source="assets/imgs/tab_horizontal_title_navigator_expand.png")]
	    private var navigator_tab_expand : Class;
	    [Embed(source="assets/imgs/tab_horizontal_title_navigator_collapse.png")]
	    private var navigator_tab_collapse : Class;
	    
	    /**
	    * The Vertical (Tasks tab header images)
	    *
	    */
	    [Embed(source="assets/imgs/tab_vertical_title_tasks_expand.png")]
	    private var tasks_tab_expand : Class;
	    [Embed(source="assets/imgs/tab_vertical_title_tasks_collapse.png")]
	    private var tasks_tab_collapse : Class;
	    
	      
	    /** 
	    * Asigns the images (disabled or not) for every button of the scale
	    */
		public function toggleButtons(value : String) : void
	     {
			day_button.source = day_on;
			week_button.source = week_on;			
			month_button.source = month_on;
			year_button.source = year_on;
	     	switch (value) 
	     	{
	     		case "day":
	     			day_button.source = day_off;
	     			break;
	     		case "week":
	     			week_button.source = week_off;
	     			break;
	     		case "month":
	     			month_button.source = month_off;
	     			break;
	     		case "year":
	     			year_button.source = year_off;
	     			break;
	     	}
	    }		       
	    
	
	    
     	/**
     	* Called when the system starts to register the event listeners
     	* Including the events triggered by the services when all data is loaded from the DB
     	* at the start.
     	*/
		private function init() : void 
		{
				
			addEventListener(Constants.LOADING_START,eventLoadingStart);
			addEventListener(TaskEvent.CUT, cut);
			addEventListener(TaskEvent.PASTE, paste);
			addEventListener(TaskEvent.COPY, copy);
			addEventListener(TaskEvent.COPY_AND_PASTE, copyAndPaste);
			addEventListener(TaskEvent.CUT_AND_PASTE, cutAndPaste);
			addEventListener(TaskEvent.SELECT, selectTask);
			addEventListener(TaskEvent.CREATE, createTask);
			addEventListener(TaskEvent.UPDATE, updateTask2);
			addEventListener(TaskEvent.DELETE, deleteTask);
			addEventListener(PopUpEvent.TASK_DETAIL_OPEN,editTaskOverlay);
			addEventListener(PopUpEvent.DELETE_DIALOG_OPEN,showDeleteDialog);
			addEventListener(TaskEvent.ADD_DEPENDENCY,addDependency);
			addEventListener(TaskEvent.DEL_DEPENDENCY, delDependency);
			addEventListener(ResourceEvent.MERGE, mergeResources);
			addEventListener(UserEvent.LOAD_ON_DEMAND , loadUsersOnDemand);
			
			//dragHorizontal events			
			var dragHorizontal : DragHorizontal = new DragHorizontal(canvasContentAll, dragPanelTasks, rbComp, systemManager, Constants.RIGHT);
			addEventListener(dragHorizontal.MOVE_LEFT, dragHorizontal.resizeHandler);
			
			//dragHorizontalEdit events			
			//var dragHorizontalEdit : DragHorizontal = new DragHorizontal(canvasContentAll, editPanel, rbComp, systemManager, Constants.LEFT);
			//addEventListener(dragHorizontalEdit.MOVE_RIGHT, dragHorizontalEdit.resizeHandler2);
			
			/**
			 * TODO move these sentences from here
			 */
			ConnectionUtil.instance.addEventListener(Constants.RECONNECTION, reconnection);
			ConnectionUtil.instance.addEventListener(Constants.LOADING_END, eventLoadingEnd);
			/**
			 *  to HERE!!! to the appropiated controller
			 */
			 
			 Components.instance.controller.addEventListener(Constants.LOADING_END,eventLoadingEnd);
			 Components.instance.controller.addEventListener(Constants.TASKS_FILTERS,filter);
			 Components.instance.controller.addEventListener(Constants.TASK_DESELECT, deSelect);
			 Components.instance.controller.addEventListener(Constants.SYNCHRONIZING, synchronize);
			 
			//event for close progress bar
			visibilityLoadingProgress(true);
		}
		
		/*
		 * Initializes controls.
		 *
		 * <p> Called after DB is loaded </p>
		 */
		public function endLoad(event : Event = null) : void
		{		
			
			if(visibleTasks.length>0)
			{
				contentBarChartOverview.height = 150;
			}
			
	
			buttonsBars.visible = true;
			if(Components.instance.ganttState!=null)
			{
				UI.scale = (this.parentApplication.width - 30) / Components.instance.ganttState.scale;
			}
			
			availableResources = CustomArrayUtil.copyArrayCollection(Components.instance.resources.resources);
			visibleTasks = Components.instance.tasks.filterVisibleTask();
			taskList2.visibleTasksList = visibleTasks;
			barChart.resizeBarChart();
			barChart.updateDates(true);	
			barChartOverview.setMaskProperties();
			barChartOverview.loadDates();
			
			grid_undo_button.enabled = Components.instance.controller.checkUndo();
			grid_redo_button.enabled = Components.instance.controller.checkRedo();
			projectNameLabel.text = Components.instance.project.name;
			
			//TODO extend it for everything else objects from Salesforce
			// Show the changes after a synchronization with the server
			//Create an view for the syncInfo singleton
			if(!SyncInfo.instance.alreadyShow){
				Alert.show(SyncInfo.instance.toString(),SyncInfo.instance.title());
			}
			
			visibilityLoadingProgress(true);
		} 
		
		public function selectTask(event : TaskEvent = null) : void
		{
			
			var canModifySelectedTask : Boolean;
			
			////////////////////////////////////////////////////////////////////////////
			//FIX this please see if a problem binding interface or something like that.
			if(event.task && event.task.id != ''){
				selectedTask = event.task;
			}else{
				selectedTask = null;
			}
			//Components.instance.tasks.selectedTask = event.task;
			//barChart.bars.selectedItem = selectedTask;
			////////////////////////////////////////////////////////////////////////////
			taskResources.buildTempResources();
			//barChart.paintSelect(selectedTask);
			centerTask();
			// Check if the user is the creator of the task,  manager or has a member assigned to the selected task.
			
			canModifySelectedTask = resourceLogged.canModifyTask(selectedTask);
			grid_delete_button.enabled = canModifySelectedTask;
			grid_edit_button.enabled = canModifySelectedTask;
			grid_indent_button.enabled = canModifySelectedTask && Components.instance.controller.checkIndent(selectedTask);
			grid_outdent_button.enabled = canModifySelectedTask && Components.instance.controller.checkOutdent(selectedTask);
			grid_newTaskDropDown.enabled = canModifySelectedTask;
			grid_copy_button.enabled = Components.instance.controller.checkCopy();
			grid_cut_button.enabled = Components.instance.controller.checkCut();

			
			delete_button.enabled = resourceLogged.canDeleteTask(selectedTask);
		}
		/**
	    * Centers the task at the grid.
	    */
		public function centerTask(event : Event = null) : void
		{
			if(selectedTask){
				barChart.centerSelected(dragPanelTasks.width, editPanel.width, editPanel.x);
				barChartOverview.setMaskProperties();
				barChart.updateDates(false);	
			}
			
		}
		
		
		/**
	    * Updates grid.
	    */
		public function filter(event : Event = null) : void 
		{
			if(visibleTasks.length>0)
			{
				Components.instance.tasks.refreshDates();//Updates start and end dates of the project
				barChart.updateDates(false);
			}	
			barChartOverview.loadDates();
			visibleTasks = Components.instance.tasks.filterVisibleTask();
			//barChart.refreshGrid();
			
			if(visibleTasks.length>0)
			{
				barChartOverview.setMaskProperties();
			}
		}
		
			
		/**
		* Asigns position of the EditOverlay
		*/
		public function statusTaskPreview(task : UiTask, x : int, y : int, visible : Boolean) : void
		{
			if(dragPanelTasks.width <= 10)
			{
				if(task != null)
				{
					taskPreview.overTask = UiTask(task.clone());
					dragPanelTaskPreview.x = x;
					dragPanelTaskPreview.y = y;
				}
				dragPanelTaskPreview.visible = visible;
			}
		}
			
		/**
		* Shows or hides the overview pane
		*/
		private function showHideOverView() : void
		{
			if(contentBarChartOverview.height==150)
			{
				barChartOverview.visible=false;
				contentBarChartOverview.height = 24;
			}
			else
			{
				contentBarChartOverview.height = 150;
				barChartOverview.visible=true;
			}
		}
		
		
		/**
		* Shows or hides the taskGrid
		*/
		private function showHideTaskGrid(): void
		{
			if(dragPanelTasks.width<927)
			{
				dragPanelTasks.width = 927;
				//taskList.setFocus();
			}
			else
			{
				dragPanelTasks.width = 27;
				barChart.setFocus();
			}
		}
		/*
		* Shows or hides all 3 panels (taskList, taskDetails, overview)
		*/
		private function resizeDragPanel(panel : String, image : Image) : void
		{
			switch (panel)
			{
				case 'editPanel':
					barChart.moveArrows();
					if(editPanel.width==Constants.DETAILS_PANEL_MIN_WIDTH)
					{
						image.source = arrow_divide_box_left;
					}
					else
					{
						image.source = arrow_divide_box_right;
					}
					break;
				case 'dragPanelTasks':
					canvasList.width=dragPanelTasks.width-Constants.GRID_PANEL_MIN_WIDTH;
					if(dragPanelTasks.width!=Constants.GRID_PANEL_MIN_WIDTH)
					{
						//taskList.moveGrid(barChart.bars.rowHeight, - barChart.barChartCanvas.y);
					}
					if(dragPanelTasks.width==Constants.GRID_PANEL_MAX_WIDTH)
					{
						image.source = tasks_tab_collapse;
					}
					else
					{
						image.source = tasks_tab_expand;
					}
					barChart.moveArrows();
					break;
					
				/* this case rename the image of the handler at the overview (Navigator Tab).	*/
				case 'contentBarChartOverview':
					if(contentBarChartOverview.height==24)
					{
						image.source = navigator_tab_expand;
					}
					else
					{
						image.source = navigator_tab_collapse;
					}
					break;
				
			}
		}
		
		
		/**
		 * Shows the given panel
		 * 
		 * @param panel
		 * */
		public function showPanel(panel : String) : void
		{
			switch (panel)
			{
				case 'editPanel':
					editPanel.width=Constants.DETAILS_PANEL_MAX_WIDTH;
					break;
				case 'dragPanelTasks':
					break;
				case 'contentBarChartOverview':
					break;	
			}
		}
		
		
		/**
		 * Hides the given panel
		 * */
		public function hidePanel(panel : String) : void
		{
			switch (panel)
			{
				case 'editPanel':
					editPanel.width=Constants.DETAILS_PANEL_MIN_WIDTH;
					break;
				case 'dragPanelTasks':
					break;
				case 'contentBarChartOverview':
					break;	
			}
		}
		
		
		/**
		* Show the progress bar
		*/  
		public function eventLoadingStart(event : Event) : void{
			visibilityLoadingProgress(true);
		}
		
		/**
		* Hides the progress bar
		* @TODO REFACTOR ASAP.
		*/
		public function eventLoadingEnd(event : Event) : void
		{
			endLoad(event);
			//TODO remove this code when the new tasklist is implemented.
			if(action == Constants.ACTION_ADD_WRITING){
				action = "";
				//taskList.nextLineAfterCreateUpdateTask();
			}
			//***************************//
			visibilityLoadingProgress(false);
			
			if(ProgressBarMessage.text == Constants.PROGRESS_BAR_CONNECTING){
				ProgressBarMessage.text = Constants.PROGRESS_BAR_LOADING;	
			}	
		}
		
		
		/**
		* Shows the progress bar
		*/
		public function visibilityLoadingProgress(visibility : Boolean, text : String = null) : void
		{
			if(!text){
				ProgressBarMessage.text = Constants.PROGRESS_BAR_LOADING;
			}else{
				ProgressBarMessage.text = text;
			}
			dragProgress.visible = visibility;
			Components.instance.salesforceService.activateCheckRefresh = !visibility;
		}
		/**
		* Show the message Reconnecting in the progress bar overlay 
		*/
		public function reconnection(event : Event): void
		{
			ProgressBarMessage.text ="Connecting...";
			//dragProgress.visible = true;
			Components.instance.salesforceService.activateCheckRefresh = false;
		}
		
		/**
		* Redirects to the team Detail
		*/
		private function loadTeamDetail():void {
			navigateToURL(new URLRequest('ProjectDetail?id='+project.id),'_self');
		}
		
		/**
		* Modal pop up to  / add a Task
		*/

		import mx.events.CloseEvent;
        import mx.managers.PopUpManager;
        
        public var openAssigneesTab : Boolean = false;
		
		
		/**
		 * Creates a new task using taskList.addTask()
		 */
		public function createNewTask (action : String):void
		{
			//remember the action
			this.action = action;
			var tasks : Tasks = Tasks(Components.instance.tasks);
			//if there is no a selected task and the action is to add a child task
			if(action == Constants.ACTION_ADD_CHILD && Components.instance.tasks.selectedTask == null){
				Alert.show(Constants.MESSAGE_SELECT_TASK,"Error");	
			}
			else{
				
				//if there is no a selected task
				if (Components.instance.tasks.selectedTask== null || Components.instance.tasks.selectedTask.id == ''){
					if(action == Constants.ACTION_ADD_BEFORE){
						this.action=Constants.ACTION_ADD_FIRST;
					}
					else if(action == Constants.ACTION_ADD_AFTER){
						this.action=Constants.ACTION_ADD_LAST;
					}						
				}
				newTask = true;
				
				//addTask(action,task);
				showTabContent('taskdetails');
				//taskResources.initializeArrays();
				//taskResources.refreshData();
				PopUpManager.addPopUp (tabbedOverlay, this, true);				
				PopUpManager.centerPopUp(tabbedOverlay);
				editTaskPanel.loadSelectedTask(newTask);
				taskResources.buildTempResources();
				dependencies.buildDependencies();
					
				
			}
		}
		
		public function addTask(action : String , task : Task) : void
		{
			visibilityLoadingProgress(true);
			this.action = action;
 			Components.instance.controller.addTask(task, action);
 			
 			barChartOverview.getScaleHeightOverview();
		}
		
		public function editTaskOverlay (event : Event = null):void
		{
			this.mode = 0;
			if(selectedTask!= null ){
				showTabContent('taskdetails');
				if(selectedTask.id != ''){
					dependencies.buildDependencies();
					//taskResources.buildTempResources();
					if(!openAssigneesTab){
												
						tabbedOverlay.width =470;
				     	tabbedOverlayGrid.width = 470;
				     	editTaskPanelWrapper.visible = true;		     	
						addAsigneesPanelWrapper.visible = false;
						addAsigneesPanelWrapper.width = 0;
					} else {
				     	openAssigneesTab = false;
						showTabContent('asignees');
					}	
				}
				
				editTaskPanel.loadSelectedTask(newTask);
				PopUpManager.addPopUp (tabbedOverlay, this, true);				
				PopUpManager.centerPopUp(tabbedOverlay);
				tabbedOverlay.setFocus();
											 
			} else {
				Alert.show(Constants.MESSAGE_SELECT_TASK,'Error');	 
			}
		}
		
		public function closeEditTaskOverlay(canceled : Boolean = true): void
		{			
			PopUpManager.removePopUp(tabbedOverlay);				
			// rebuild the overlay to the next load
			editTaskPanel.clean();
			addAsigneesPanelWrapper.visible = false;
			task_asignees_tab.setStyle("backgroundImage", overlay_tab);
			task_details_tab.setStyle("backgroundImage", overlay_selected_tab);
			task_links_tab.setStyle("backgroundImage", overlay_tab);				 
			addAsigneesPanelWrapper.width = 0;
			editTaskPanelWrapper.width = 470;
			editTaskPanelWrapper.visible = true;
			currentOverlayTab = 'taskdetails';
			
			newTask = false;	
			barChart.setFocus();	
				
		}			
		
				
		/**
		* Saves Task for All Tabs in Overlay
		* Unifies methods for Save in all tab 
		*/
		public function saveTask(): void 
		{
			dependencies.removeFakeData();
			taskResources.removeFakeData();
			editTaskPanel.save();
		}
		
		
		/**
		* Tab Changes at the overlay
		*
		*/
		
		private var currentOverlayTab : String = '';
		
		//mode If 0 editingTask, if 1 creatingNewTask
		private var mode : Number;
		
		public  function showTabContent(tabName : String,addAssignee : Boolean = false):void
		{
			if(currentOverlayTab != tabName){
				switch (tabName) {
					case 'asignees':	
						
						// Hide the other overlay sections					
						editTaskPanelWrapper.visible = false;
						taskLinksPanelWrapper.visible = false;
						
						// Refresh the arrays binded 
						//taskResources.tempTaskResources.refresh();
						//taskResources.availableResources.refresh();
						
						// Set the active tab 
						task_asignees_tab.setStyle("backgroundImage", overlay_selected_tab);
						task_details_tab.setStyle("backgroundImage", overlay_tab);
						task_links_tab.setStyle("backgroundImage", overlay_tab);
						
						// Expand the current panel
						addAsigneesPanelWrapper.width = 470;
						
						// Set the other panels width
						editTaskPanelWrapper.width = 0;
						taskLinksPanelWrapper.width = 0;										
						
						// Show the selected section and set the current state	
						addAsigneesPanelWrapper.visible = true;
						currentOverlayTab = 'asignees';	
						if(addAssignee){
							taskResources.addRow();	
						}
					break;
					case 'taskdetails':
					
						addAsigneesPanelWrapper.visible = false;
						taskLinksPanelWrapper.visible = false;
						
						task_asignees_tab.setStyle("backgroundImage", overlay_tab);
						task_details_tab.setStyle("backgroundImage", overlay_selected_tab);
						task_links_tab.setStyle("backgroundImage", overlay_tab);
					 	
					 	taskLinksPanelWrapper.width = 0;
						addAsigneesPanelWrapper.width = 0;
						editTaskPanelWrapper.width = 470;
					
						editTaskPanelWrapper.visible = true;
						currentOverlayTab = 'taskdetails';
						
					break;
					case 'tasklinks':
						
						addAsigneesPanelWrapper.visible = false;
						editTaskPanelWrapper.visible = false;
						
						task_asignees_tab.setStyle("backgroundImage", overlay_tab);
						task_details_tab.setStyle("backgroundImage",overlay_tab );
						task_links_tab.setStyle("backgroundImage", overlay_selected_tab);
						
						
						addAsigneesPanelWrapper.width = 0;
						editTaskPanelWrapper.width = 0;
						taskLinksPanelWrapper.width = 470;
						
						taskLinksPanelWrapper.visible = true;
						currentOverlayTab = 'tasklinks';
						
						
					break;
				}
			}
		}
		
		/**
		 * Delete Dialog
		 * */
		
		public function showDeleteDialog(event : Event = null) : void {			
			PopUpManager.addPopUp (deleteDialog, this, true);				
			PopUpManager.centerPopUp(deleteDialog);
			deleteDialog.setFocus();
		}
		
		public function deleteTask(event : Event = null) : void {
			visibilityLoadingProgress(true);
			Components.instance.controller.deleteTask(selectedTask);
		}
			
		private function deSelect(event : Event = null) : void{
			selectedTask = null;
			Components.instance.tasks.deSelect();
			
			// TODO refactor this
			grid_indent_button.enabled = false;
			grid_outdent_button.enabled = false;
			grid_delete_button.enabled = false;
			grid_edit_button.enabled = false;
			grid_indent_button.enabled = false;
			grid_outdent_button.enabled = false;
			grid_copy_button.enabled = false;
			grid_cut_button.enabled = false;
			//grid_paste_button.enabled = false
			grid_newTaskDropDown.enabled = resourceLogged.canCreate;
			//
		}	
		
		public function createTask(event : TaskEvent) : void{
			visibilityLoadingProgress(true);
			Components.instance.controller.addTask(event.task, Constants.ACTION_ADD_WRITING);	
		}
		
		public function updateTask2(event : TaskEvent) : void{
			visibilityLoadingProgress(true);
			Components.instance.controller.updateTask(event.task);	
		}
		
		public function updateTask(type : String) : void{
			if(selectedTask){			
				visibilityLoadingProgress(true);
				addListener(Constants.TASK_MODIFIED_BY_OTHER_WAY);
				if(type == Constants.LEFT){
					Components.instance.controller.outdent(selectedTask);
				}else if(type == Constants.RIGHT){
					Components.instance.controller.indent(selectedTask);
				}			
			}else{
				Alert.show(Constants.MESSAGE_SELECT_TASK,"Error");
			}
		}
	
		public function addListener(type : String = "") : void{
			
			switch(type){
				case Constants.TASK_MODIFIED_BY_OTHER_WAY:
						addEventListener(type,eventLoadingEnd);
					break;
			}
		}
		
		//TODO call method from controller to call resetTimer
		private function resetSynchronizerTimer(event : Event) : void{
			Components.instance.salesforceService.resetTimer();
		}
		
		//TODO encapsulate the synchronize functionality into the Controller class.
		private function synchronize(event : Event = null) : void{
			visibilityLoadingProgress(true,Constants.PROGRESS_BAR_SYNC);
			//Components.instance.syncInfo.alreadyShow = false;
			//Components.instance.controller.cleanHistory();
			//var ids : Array = Components.instance.tasks.getIds();
			//Components.instance.salesforceService.checkRefresh(ids);
			Components.instance.controller.synchronize(project);
		}
		
		private function undo() : void{
			visibilityLoadingProgress(true);
			Components.instance.controller.undo();	
		}
		
		private function redo() : void{
			visibilityLoadingProgress(true);
			Components.instance.controller.redo();	
		}
		
		private function cutAndPaste(event : TaskEvent) : void{
			visibilityLoadingProgress(true);
			selectTask(event);
			Components.instance.controller.cut();
			Components.instance.controller.paste();
		}
		
		private function copyAndPaste(event : TaskEvent) : void{
			visibilityLoadingProgress(true);
			selectTask(event);
			Components.instance.controller.copy();
			Components.instance.controller.paste();
		}
		
		private function paste(event : Event = null):void {
			visibilityLoadingProgress(true);
			Components.instance.controller.paste();
		}
		
		private function cut(event : Event = null) : void{
			Components.instance.controller.cut();
		}
		
		private function copy(event : Event = null) : void{
			Components.instance.controller.copy();
		}
		
		private function addDependency(event : TaskEvent = null) : void{
			visibilityLoadingProgress(true);
			Components.instance.controller.addDependency([event.dependency],event.task);
		}
		
		private function delDependency(event : TaskEvent = null) : void{
			visibilityLoadingProgress(true);
			Components.instance.controller.deleteDependency([event.dependency],event.task);
		}
		
		private function mergeResources(event : ResourceEvent) : void{
			visibilityLoadingProgress(true);
			Components.instance.controller.mergeResources(event.resources);
		}
		
		private function loadUsersOnDemand(event : UserEvent) : void{
			Components.instance.controller.loadUsersOnDemand(event.pattern,event.target.dataProvider,event.filtered);
		}
		]]>
</mx:Script>
<mx:Style source="assets/css/MainView.css"/>		
<mx:Style source="assets/css/CollapsableTabNavigator.css"/>	
<mx:Binding destination="selectedTask" source="Components.instance.tasks.selectedTask" />
<mx:Binding destination="Components.instance.tasks.selectedTask" source="selectedTask"/>
<mx:Binding destination="project" source="Components.instance.project" />
<mx:Binding destination="resourceLogged" source="Components.instance.resourceLogged"/>
<mx:Binding destination="profiles" source="Components.instance.profiles"/>
<mx:HBox styleName="canvasTitleTopBorder" width="100%" height="0" paddingBottom="2" horizontalScrollBarStyleName="scrollBar" verticalScrollBarStyleName="
scrollBar"/>
<!--  
		Top Canvas , contains buttons and Title	
 -->
<mx:Canvas height="36" width="100%" styleName="canvasTitle" mouseOver="barChart.defaultCursor()" x="0" y="0" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<!-- Title label -->
	<mx:HBox left="5" height="30" useHandCursor="true" paddingLeft="0" paddingRight="0">
 		<mx:Label id="projectNameLabel" styleName="hyperlinklabelTitle" width="100%" height="35"  click="loadTeamDetail();" useHandCursor="true" buttonMode="true"  mouseChildren="false"/> 		
 	</mx:HBox>
 	<!-- 
 			Middle Buttons Container
 			Task Operations
 	 -->
 	<mx:HBox left="300" height="20"  > 
	 	<mx:Grid horizontalGap="5" id="managerControls" visible="true" >
				<mx:GridRow>
					<mx:GridItem id="grid_newTaskDropDown" enabled="true">
						<mx:Script>
					        <![CDATA[
					            /**
					            * This fills the dropdown menu of the new task button 
					            */
					            import mx.collections.ArrayCollection;
								
					            [Bindable]
					            public var newtaskOpts:ArrayCollection = new ArrayCollection(
					                [  	{label:"Insert task above", data:1}, 
					                  	{label:"Insert task below", data:2}, 
					                  	{label:"Create a sub task", data:3} ]);
					            
					            private function resetPrompt():void {					            						            	
					            	if (newTaskDropDown.selectedIndex==0){
					            		createNewTask(Constants.ACTION_ADD_BEFORE);
					            	}
					            	else if (newTaskDropDown.selectedIndex==1){
					            		createNewTask(Constants.ACTION_ADD_AFTER);
					            	}
					            	else{
					            		createNewTask(Constants.ACTION_ADD_CHILD);
					            	}
					            	newTaskDropDown.selectedIndex = -1;
					            	this.mode = 1;
					            }     
					        ]]>
					    </mx:Script>
					    <mx:ComboBox 
					    	id="newTaskDropDown"
					    	dataProvider="{newtaskOpts}"
					    	change="resetPrompt()"
					    	upSkin="@Embed(source='assets/imgs/new_btn.png')"
					    	downSkin="@Embed(source='assets/imgs/new_btn.png')"
					    	overSkin="@Embed(source='assets/imgs/new_btn.png')"
					    	dropdownBorderColor="#000000"
					    	width="56" dropdownWidth="200"
					    	prompt=""
					    	height="19"
					    	selectionColor="0xFFFFFF"
					    	focusEnabled="false"
					    	buttonMode="true"
					    	rollOverColor="0xF9F8CD"/>	
					</mx:GridItem>
					<mx:GridItem id="grid_edit_button" enabled="false">
						<mx:Image styleName="topDateButtons" id="edit_button" source="@Embed(source='assets/imgs/edit_btn.png')" 
									click="{dispatchEvent(new PopUpEvent(PopUpEvent.TASK_DETAIL_OPEN))}" buttonMode="true" /> 
					</mx:GridItem>
					<mx:GridItem id="grid_delete_button" enabled="false">
						<mx:Image styleName="topDateButtons" id="delete_button" source="@Embed(source='assets/imgs/delete_btn.png')" 
									click="{dispatchEvent(new PopUpEvent(PopUpEvent.DELETE_DIALOG_OPEN))}" buttonMode="true"/>
					</mx:GridItem>
					<mx:GridItem id="grid_indent_button" enabled="false">
						<mx:Image styleName="topDateButtons" id="indent_button" source="@Embed(source='assets/imgs/indent_btn.png')" 
									click="updateTask(Constants.RIGHT)" buttonMode="true"/>
					</mx:GridItem>
					<mx:GridItem id="grid_outdent_button" enabled="false" >
						<mx:Image  styleName="topDateButtons" id="outdent_button" source="@Embed(source='assets/imgs/outdent_btn.png')" 
									click="updateTask(Constants.LEFT)" buttonMode="true"/>
					</mx:GridItem>
					<mx:GridItem id="grid_cut_button" enabled="false" >
						<mx:Image  styleName="topDateButtons" id="cut_button" source="@Embed(source='assets/imgs/cut_btn.png')" 
									click="{dispatchEvent(new TaskEvent(TaskEvent.CUT))}" buttonMode="true"/>
					</mx:GridItem>
					<mx:GridItem id="grid_copy_button" enabled="false" >
						<mx:Image  styleName="topDateButtons" id="copy_button" source="@Embed(source='assets/imgs/copy_btn.png')" 
									click="{dispatchEvent(new TaskEvent(TaskEvent.COPY))}" buttonMode="true"/>
					</mx:GridItem>
					<mx:GridItem id="grid_paste_button" enabled="true" paddingRight="50">
						<mx:Image  styleName="topDateButtons" id="paste_button" source="@Embed(source='assets/imgs/paste_btn.png')" 
									click="{dispatchEvent(new TaskEvent(TaskEvent.PASTE))}" buttonMode="true"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image styleName="topDateButtons" id="synchronize_button" source="@Embed(source='assets/imgs/synchronize_btn.png')" 
									click="synchronize()" buttonMode="true"/>						
					</mx:GridItem>
					<mx:GridItem id="grid_undo_button" enabled="false">
						<mx:Image styleName="topDateButtons" id="undo_button" source="@Embed(source='assets/imgs/undo_btn.png')" 
									click="undo()" buttonMode="true"/>
					</mx:GridItem>
					<mx:GridItem id="grid_redo_button" enabled="false">
						<mx:Image styleName="topDateButtons" id="redo_button" source="@Embed(source='assets/imgs/redo_btn.png')" 
									click="redo()" buttonMode="true"/>
					</mx:GridItem>	
			</mx:GridRow>
		</mx:Grid>				
	</mx:HBox>
	<!-- 
			Time Scale Buttons
			Months / Days / Weeks / Years 
	-->
	<mx:HBox id="buttonsBars" visible="false" right="6" height="25"  verticalAlign="top">
		<mx:Grid horizontalGap="0">
			<mx:GridRow>
	    		<mx:GridItem>
	   				<mx:Image styleName="topDateButtons" id="day_button" source="@Embed(source='assets/imgs/show_day_on.gif')"   click="barChart.changeZoom(Constants.DAY);toggleButtons('day')"  buttonMode="true"/> 				
	    		</mx:GridItem>
	    		<mx:GridItem>
	    			<mx:Image styleName="topDateButtons" id="week_button"  source="@Embed(source='assets/imgs/show_week_on.gif')"   click="barChart.changeZoom(Constants.WEEK);toggleButtons('week')" buttonMode="true"/>
	    		</mx:GridItem>
	    		<mx:GridItem>
					<mx:Image id="month_button" source="@Embed(source='assets/imgs/show_month_off.gif')"  click="barChart.changeZoom(Constants.MONTH);toggleButtons('month')" buttonMode="true"/>		    				
	    		</mx:GridItem>
	    		<mx:GridItem>
					<mx:Image id="year_button"   source="@Embed(source='assets/imgs/show_year_on.gif')"  click="barChart.changeZoom(Constants.YEAR);toggleButtons('year')" buttonMode="true"/>		    				
	    		</mx:GridItem>
	    	</mx:GridRow>	
	    </mx:Grid>
	</mx:HBox>
</mx:Canvas>
<!--  
		Middle Canvas , contains gantt chart and tasklist	
 -->
<mx:Canvas resize="barChartOverview.setMaskProperties()" height="100%" width="100%" id="canvasContentAll" y="22"
		xmlns:comp = "com.salesforce.gantt.view.components.*" horizontalScrollPolicy="off" verticalScrollPolicy="off" backgroundColor="#FFFFFF">	
		<!--  
			Gantt Bar Chart	
 		-->
		<view:BarChart visibleTasks="{visibleTasks}" selectedTask="{selectedTask}" width="100%" height="100%" id="barChart"/>		
		<!--  
			DataGrid
			Tasklist
 		-->		
		<comp:RubberBandComp id="rbComp"  height="0" width="0" visible="false" />
		<comp:DragPanel id = "dragPanelTasks" 
			resize="resizeDragPanel('dragPanelTasks',arrow_divide_box_tasklist);"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
			height="100%" 
			width="{Constants.GRID_PANEL_MIN_WIDTH}"  
			headerHeight="0"
			backgroundAlpha=".0"
			dropShadowEnabled="false"
			alpha="1"
			styleName = "dragPanelTaskList"
			horizontalScrollBarStyleName="scrollBar" 
			verticalScrollBarStyleName="scrollBar">
		<mx:HBox id="hboxDragPanelTasks"  height="100%" width="100%" horizontalGap="0" verticalGap="0"  horizontalScrollBarStyleName="scrollBar" verticalScrollBarStyleName="scrollBar">
			<mx:Canvas id="canvasList" autoLayout="true"  height="100%" width="100%" left="0" top="0">
			</mx:Canvas>
			<!--	Here starts the handler and the tab of tasks -->
			<mx:Canvas autoLayout="true" height="100%" width="24" right="0" top="0" verticalScrollPolicy="off" >
				<mx:Canvas 
					height="100%" width="7" top="0" y="0" backgroundSize="100%"
					backgroundImage="@Embed(source='assets/imgs/tab_vertical_handler.png')" 
					useHandCursor="true"  buttonMode="true"  visible="false"/>
				<mx:Image id="arrow_divide_box_tasklist" useHandCursor="true" buttonMode="true" 
					top="15" right="0" height="55" width="18"
					source="@Embed(source='assets/imgs/tab_vertical_title_tasks_expand.png')" visible="false" click="showHideTaskGrid()"/>
				<mx:Image useHandCursor="true" buttonMode="true" 
					top="300" left="0" 
					source="@Embed(source='assets/imgs/tab_vertical_handler_lines.png')" visible="false"/>
			</mx:Canvas>
		</mx:HBox>			
	</comp:DragPanel>
	<container:CollapsableTabNavigator
		tabBarLocation="right" tabStyleName="tabNavigator"  styleName="container"
		verticalAlign="top">
        <mx:Box height="500" label="New Tasks Tab" >
            <view:TaskList2 id="taskList2" 
            tasksHandler="{Components.instance.tasks}"
			visibleTasksList="{visibleTasks}"
			selectedResource="{resourceLogged}"
			selectedTask="{selectedTask}"/>
        </mx:Box>
        <mx:Box height="100%" label="Project" 
        	horizontalScrollPolicy="off" 
			verticalScrollPolicy="off">
            <view:ProjectDetail id="projectDetail" project="{project}"/>
        </mx:Box>
        <mx:Box height="100%" width="100%" label="Resources" 
        	horizontalScrollPolicy="off" 
			verticalScrollPolicy="off">
            <view:MembersDetail id="availableResources2" 
            	selectedTask="{selectedTask}" 
            	availableResources="{availableResources}"
            	resource="{resourceLogged}"
            	profiles="{profiles}"/>
        </mx:Box>
	</container:CollapsableTabNavigator>
	<!-- 
		Delete Dialog
		At Hidden Drag panel.
		@TODO - Move this code to another file.
	-->
	<mx:Panel visible="false">		
		<mx:Canvas 
			id="deleteDialog" 
			styleName="deleteDialog"
			width="475"
			height="170"
			mouseOver="barChart.defaultCursor();"
			keyUp="keyPressedDeleted(event)">
			<mx:Script>
				<![CDATA[
				public function keyPressedDeleted(event : KeyboardEvent): void {
			 	switch (event.keyCode){
			 		case Keyboard.ESCAPE :
				 		closeDeleteDialog();
			 			break;
			 		case Keyboard.ENTER :
			 			deleteTaskDialog();
			 			break;			
			 		}
			 	}
			 	
			 	private function closeDeleteDialog() : void {
					PopUpManager.removePopUp(deleteDialog);
					//TODO : set focus to barchart dispatch an event to focus lost.
					barChart.setFocus();
				}
				
				private function deleteTaskDialog() : void{
					dispatchEvent(new TaskEvent(TaskEvent.DELETE));
			 		PopUpManager.removePopUp(deleteDialog);	
				}
				
				]]>
			</mx:Script>
			<mx:Grid width="475" height="170" horizontalGap="0" verticalGap="0">
				<mx:GridRow>
					<mx:GridItem height="35" width="475" verticalScrollPolicy="off" horizontalScrollPolicy="off">
						<mx:HBox  width="475" height="100%" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2">
							<mx:Grid width="100%" height="100%" backgroundColor="0x21637D">
								<mx:GridRow width="100%" height="35">
									<mx:GridItem width="50%" verticalAlign="middle" horizontalAlign="left" height="30" paddingLeft="10">
										<mx:Label color="#ffffff" text="Delete Task"  styleName="headerlabel"  />								
									</mx:GridItem>
									<mx:GridItem width="50%" horizontalAlign="right" height="30" paddingTop="10" paddingRight="10" >										
										<mx:Image source="@Embed(source='assets/imgs/close_overlay.gif')" buttonMode="true"  click="closeDeleteDialog()"  useHandCursor="true"  />																				
									</mx:GridItem>
								</mx:GridRow>
							</mx:Grid>
						</mx:HBox>						
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem width="475" height="80" paddingTop="20" paddingLeft="20">
						<mx:Grid verticalGap="0" horizontalGap="0">
							<mx:GridRow width="100%">
								<mx:GridItem>
									<mx:Label color="#000000" text="Are you sure you want to continue?" fontWeight="bold"  fontSize="11" fontFamily="Arial"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>						
					</mx:GridItem> 
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem width="475" horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="2" paddingRight="2" paddingTop="10">						
						<mx:VBox  horizontalAlign="center" width="100%" paddingTop="7" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="deleteDialogButtons">							
							<mx:Grid verticalGap="5" horizontalScrollPolicy="off" verticalScrollPolicy="off">								
								<mx:GridRow horizontalScrollPolicy="off" verticalScrollPolicy="off">
									<mx:GridItem backgroundColor="0x21637D" width="135" height="27" verticalAlign="middle" horizontalAlign="center" horizontalScrollPolicy="off" verticalScrollPolicy="off">
										<mx:Label id="continueAndDeleteBtn" click="deleteTaskDialog()"  useHandCursor="true"  buttonMode="true"  mouseChildren="false" text="Continue and Delete" color="white"  fontWeight="bold" fontSize="12"  fontFamily="Arial"/>						
									</mx:GridItem>
									<mx:GridItem backgroundColor="0x989999"  width="55" height="27" verticalAlign="middle" horizontalAlign="center" horizontalScrollPolicy="off" verticalScrollPolicy="off">
										<mx:Label id="cancelDeleteBtn" click="closeDeleteDialog();" useHandCursor="true" buttonMode="true"  mouseChildren="false"  text="Cancel" color="white" fontWeight="bold" fontSize="12"  fontFamily="Arial"/>
									</mx:GridItem>
								</mx:GridRow>
							</mx:Grid>
						</mx:VBox>	
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>				
		</mx:Canvas>
	</mx:Panel>
	<!--  
		Drag Panel Task Details and Resources
		* Currently Not Visible 
 	-->
	<mx:Panel
		styleName = "dragPanelDetailsAndResources" 
		resize="resizeDragPanel('editPanel',arrow_divide_box_edit)"		
		id = "editPanel" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off"
		height="100%"
		width="18"
		dropShadowEnabled="false" 
		headerHeight="0"
		alpha="0"
		visible="false"	> 
		<mx:HBox width="100%" height="100%" verticalGap="0" horizontalGap="0">
				<mx:Canvas autoLayout="true" height="100%" >
					<mx:Canvas 
					height="100%" width="8" left="0" top="0" y="0" backgroundSize="100%"
					backgroundImage="@Embed(source='assets/imgs/divide_vox_right.jpg')" 
					useHandCursor="true" buttonMode="true" />
					<mx:Image id="arrow_divide_box_edit" useHandCursor="true" buttonMode="true" 
					top="50" y="50" height="8"
					source="@Embed(source='assets/imgs/arrow_divide_box_right.png')" />
					<mx:Image useHandCursor="true" buttonMode="true" 
					top="300" y="300" 
					source="@Embed(source='assets/imgs/lines_divide_box_right.png')" />
				</mx:Canvas>
				<mx:VBox styleName="VBoxResourceEditTaskPanel" height="100%" width="100%">
				<!--
					This is the Overlay to edit / Add a task
					@TODO Maybe this code must be moved to another file.
				--><mx:Script>
						function tabbedOverlayKeyEvent(event : KeyboardEvent): void{
							switch(event.keyCode){
								case Keyboard.ENTER :
										saveTask();
									break;
								case Keyboard.ESCAPE :
										closeEditTaskOverlay();
									break;
								default	:
									break;	 
							} 
						}
					</mx:Script>
					<mx:Canvas 	id="tabbedOverlay" 
								width="470" 
								height="470" 
								styleName="tabbedOverlay"  
								verticalScrollPolicy="off" 
								horizontalScrollPolicy="off"
								keyDown="tabbedOverlayKeyEvent(event)"
								>
						 <mx:Grid verticalGap="0" horizontalGap="0" id="tabbedOverlayGrid"  borderColor="#00ff00" width="470"  verticalScrollPolicy="off" horizontalScrollPolicy="off">
						 	<mx:GridRow width="470"  backgroundColor="0x21637D">
							 	<mx:GridItem  width="470" verticalAlign="bottom"  verticalScrollPolicy="off" horizontalScrollPolicy="off">
							 		<mx:Grid width="470" verticalGap="0" horizontalGap="0" height="30" verticalScrollPolicy="off" horizontalScrollPolicy="off">
							 			<mx:GridRow  borderThickness="1" borderColor="0x21637D" width="470">
							 				<mx:GridItem height="25" verticalAlign="middle"  width="50%">
									 			<mx:Label text="{(newTask?'Create':'Edit')+ ' Task'}" styleName="headerlabel" />						 			
									 		</mx:GridItem>
									 		<mx:GridItem backgroundColor="0x21637D" textAlign="right"  width="50%" horizontalAlign="right" paddingTop="10" paddingRight="15">									 			
									 			<mx:Image source="@Embed(source='assets/imgs/close_overlay.gif')" buttonMode="true" click="closeEditTaskOverlay()" useHandCursor="true"  />									 			
									 		</mx:GridItem>									 			
							 			</mx:GridRow>
							 		</mx:Grid>
							 	</mx:GridItem>						 		 			
						 	</mx:GridRow>
						 	<mx:GridRow backgroundColor="0x21637D"  height="25"  >
						 		<mx:GridItem verticalAlign="bottom">
						 			
						 			<mx:Grid verticalGap="0" horizontalGap="5" verticalAlign="bottom" width="470">
						 				<mx:GridRow>
						 					<mx:GridItem  width="15" height="19">
						 					</mx:GridItem>
						 					<mx:GridItem  backgroundImage="@Embed(source='assets/imgs/gray_tab.png')"  width="75" textAlign="center" height="19" id="task_details_tab">
						 						<mx:Label id="taskDetailLabelTab" text="Details"   width="75" textAlign="center" click="showTabContent('taskdetails');"/>
						 					</mx:GridItem>
						 					<mx:GridItem backgroundImage="@Embed(source='assets/imgs/gray_tab.png')"  width="75" textAlign="center" height="19" id="task_links_tab">
						 						<mx:Label id="taskDependencyLabelTab" text="Task Links"   width="75" textAlign="center" click="showTabContent('tasklinks');"/>
						 					</mx:GridItem>
						 					<mx:GridItem  backgroundImage="@Embed(source='assets/imgs/gray_tab.png')"  width="75" textAlign="center" height="19" id="task_asignees_tab">
						 						<mx:Label id="taskAsigneesLabelTab" text="Assignees"   width="75" textAlign="center" click="showTabContent('asignees');"/>
						 					</mx:GridItem>
						 				</mx:GridRow>
						 			</mx:Grid>
						 		</mx:GridItem>
						 	</mx:GridRow>
						 	<mx:GridRow horizontalAlign="left">
						 		<mx:GridItem width="470" horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="left" textAlign="left">
						 			<!-- The overlay Sections -->
						 			<mx:Grid horizontalGap="0" width="100%">
						 				<mx:GridRow horizontalAlign="left">
						 					<mx:GridItem>
						 						<mx:Canvas  id="editTaskPanelWrapper" width="470"  horizontalScrollPolicy="off" verticalScrollPolicy="auto" visible="false">						 								 			
									 				<view:TaskDetail width="470" id="editTaskPanel" selectedTask="{selectedTask}"/>						 			
									 			</mx:Canvas>			
						 					</mx:GridItem>
						 					<mx:GridItem>
						 						<mx:Canvas  id="taskLinksPanelWrapper" width="470"  horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="false">						 								 			
									 				<view:Dependencies width="470" selectedTask="{selectedTask}" id="dependencies"  horizontalScrollPolicy="off" verticalScrollPolicy="off"  />						 			
									 			</mx:Canvas>			
						 					</mx:GridItem>
						 					<mx:GridItem>
						 						<mx:Canvas  id="addAsigneesPanelWrapper" width="470"  horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="false">						 										 			
									 				<view:TaskResources width="470" selectedTask="{selectedTask}" id="taskResources"  horizontalScrollPolicy="off" verticalScrollPolicy="off"  />						 			
									 			</mx:Canvas>						
						 					</mx:GridItem>
						 				</mx:GridRow>
						 			</mx:Grid> 			
						 		</mx:GridItem>
						 	</mx:GridRow>
						 	<mx:GridRow >
						 		<mx:GridItem>
						 			<mx:Grid verticalAlign="middle">
										<mx:GridRow>
											<mx:GridItem verticalAlign="middle" horizontalAlign="center" colSpan="2">
												<mx:Image width="100%" source="@Embed(source='assets/imgs/line_hr.png')" />	
											</mx:GridItem>					
										</mx:GridRow>
										<mx:GridRow height="50" verticalAlign="middle">
											<mx:GridItem verticalAlign="middle" horizontalAlign="right">
												<mx:TextInput 
													id="saveBtn" 	
													width="70" 
													height="25"
													editable="false" 
													useHandCursor="true"  
													buttonMode="true"
													mouseChildren="false" 
													text="Save"
													styleName="tabbedOverlayButton" 
													click="saveTask()" 
													 />						
											</mx:GridItem>
											<mx:GridItem verticalAlign="middle" horizontalAlign="left">
												<mx:TextInput 
													id="cancelBtn" 
													width="70" 
													height="25"
													editable="false" 
													click="closeEditTaskOverlay();" 
													useHandCursor="true" buttonMode="true"  
													mouseChildren="false"  
													styleName="tabbedOverlayButton"
													text="Cancel" 
													 />
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
						 		</mx:GridItem>
						 	</mx:GridRow>
						 </mx:Grid>
					</mx:Canvas>
			    </mx:VBox>
		</mx:HBox>
	</mx:Panel>
	<mx:Panel styleName = "dragPanelTaskPreview"     
		id = "dragPanelTaskPreview" borderColor="black" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		dropShadowEnabled="false"  
		alpha="1" visible="false"> 		
		<view:TaskPreview id = "taskPreview" width="100%" />
	</mx:Panel>	
	
	<!-- TODO may be remove in a separate file. -->
	<mx:Panel id = "dragProgress" 
		visible="false" 
		horizontalScrollPolicy="off"
		verticalScrollPolicy="off"
		height="100%" 
		width="100%"  
		headerHeight="0"
		dropShadowEnabled="false"
		backgroundAlpha="0"
		verticalAlign="middle"
		horizontalAlign="center"
		styleName = "dragPanelTaskPreview"
		borderColor="black"
		modalTransparency="0.5" 	>
		<mx:Canvas height="50" width="170"
			 backgroundColor="#ffffff"
			 dropShadowEnabled="true" dropShadowColor="0x000000"
	 		 shadowDirection="right" shadowDistance="5" 
			 borderColor="#eaeaea"			 
			 styleName="FontCornerRadius">
			<mx:HBox verticalAlign="middle" horizontalAlign="left" width="100%" height="100%">
				<mx:Spacer width="10" />
				<mx:Image width="25" height="25" source="{loading_image}"    />
				<mx:Label id="ProgressBarMessage" width="100%" text="Loading..." styleName="labelLoading" />
			</mx:HBox>
		</mx:Canvas>
	</mx:Panel>	
	<!--  to here-->
	<!-- 
		The tab of the Navigation Section
		Must be here to overlap the Gantt				
	-->
	<mx:Image id="tab_handler_overview" useHandCursor="true" buttonMode="true" click="showHideOverView()" 
					right="50" bottom="0" width="75" height="17"
					source="@Embed(source='assets/imgs/tab_horizontal_title_navigator_collapse.png')" />	
</mx:Canvas>

<mx:Canvas id="contentBarChartOverview" height="8" width="100%" verticalScrollPolicy="off"
	 backgroundAlpha=".0" >
		<mx:VBox width="100%" height="100%" verticalGap="0" horizontalGap="0">
			<!-- 
				Here starts the handler and the tab of Navigation				
			-->
		<mx:Canvas width="100%" click="showHideOverView()" height="6" backgroundAlpha=".0">					
					<mx:Canvas 
						height="7" width="100%" bottom="0" x="0" backgroundSize="100%"
						backgroundImage="@Embed(source='assets/imgs/tab_horizontal_handler.png')" 
						useHandCursor="true" buttonMode="true" />
					<mx:Image useHandCursor="true" buttonMode="true" 
						left="300" bottom="0" width="18" height="7"
						source="@Embed(source='assets/imgs/tab_horizontal_handler_lines.png')" />
			</mx:Canvas>
			<view:BarChartOverview width="100%" height="100%" id="barChartOverview" visibleTasks="{visibleTasks}"/>
		</mx:VBox>
</mx:Canvas>
</mx:VBox>

